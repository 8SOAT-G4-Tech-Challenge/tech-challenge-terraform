apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-tech-challenge
  labels:
    app: api-tech-challenge
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
  selector:
    matchLabels:
      app: api-tech-challenge
  template:
    metadata:
      name: api-tech-challenge
      labels:
        app: api-tech-challenge
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - arm64
      containers:
        - name: api-tech-challenge-container
          image: lucasaccurcio/tech-challenge-api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3333
          envFrom:
            - configMapRef:
                name: env-config
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: DATABASE_URL
              value: 'postgresql://postgres:$(POSTGRES_PASSWORD)@postgres-service:5432/tech-challenger'
          livenessProbe:
            httpGet:
              path: /docs
              port: 3333
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /docs
              port: 3333
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 5
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
      nodeSelector:
        kubernetes.io/os: linux
